<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
	<xs:annotation>
		<xs:documentation xml:lang="eng">
			This a An XML schema that represent the design of our Real Estate convenient Database.
			Is with different tables that aim to simplify different tasks of a real estate agent.
		</xs:documentation>
	</xs:annotation>
	<!--Declaring the first element on our-->
	<xs:element name="RealEstate_Database" type="RealEstateXMLDB"/>

<!--We are here putting elements inside the element. Here the Database as an element which will contain the different tables of our DB-->
	<xs:complexType name="RealEstateXMLDB">
		<xs:sequence>
			<!--We will here Declare all the tables which are directly related to the properties the agent has to sell-->
			<xs:element name="Properties" type="PropertyCatalog" minOccurs="0" maxOccurs="unbounded"/>
			<!--Here is the creation of the second table, the one in charge of the RealEstate informations parts-->
			<xs:element name="RealEstateAgent" type="AgentCatalog" minOccurs="1" maxOccurs="unbounded"/> <!--MinOccurs 1 because the system is used by an agent so at least 1 person-->
			<!--We will here crate the table which will contains all the informations about the Landlords who want to sell their properties-->
			<xs:element name="LandLordInformations" type="LandlordCatalog" minOccurs="0" maxOccurs="unbounded"/>
			<!--As before, creation of a new table, for the informations regarding the buyer this time-->
			<xs:element name="BuyerInformations" type="BuyerCatalog" minOccurs="0" maxOccurs="unbounded"/>
			<!--Same reasonment as before, but here for the legal part of the sales, the mandatory Notary !!-->
			<xs:element name="NotaryInformations" type="NotaryCatalog" minOccurs="1" maxOccurs="unbounded"/>
			<!--A good idea would be to collect some informations about pontential buyers in order to do some targeted advertisment campaign-->
			<xs:element name="TargetedCustomerInformation" type="TargetedCustomerCatalog" minOccurs="0" maxOccurs="unbounded"/>
			<!--We will here handle the final sale of a property in order to generate the invoices-->
			<xs:element name="Sales_Table" type="SalesCatalog" minOccurs="0" maxOccurs="unbounded"/>
			<!--As teased before we will use the data collected in order to focus the marketing of the company-->
			<xs:element name="AdvertisingCampaign_table" type="AdvertisingCampaignCatalog" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
				
				
				
	<!--The data base has been designed around the properties table. In fact without properties to sell, the whole model is pointless.
	This table will have a primary key ID and will contain a lot of informations about the houses/appartements.-->
	<!--For all the following code the reasonment is the same, we already declared an element of the DB as catalog type, the one are containing the entries of
	Types that are then further defined-->
	<xs:complexType name="PropertyCatalog">
		<xs:sequence>
			<xs:element name="Property" type="PropertyType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
			
	<xs:complexType name="PropertyType">
		<xs:sequence>
			<xs:element  name="PropertyID" type="xs:ID"/>
			<xs:element  name="AgentID" type="xs:IDREF"/>
			<xs:element  name="LandlordID" type="xs:IDREF"/>
			<xs:element  name="TypeOfContract" type="xs:string"/> <!--Type of contract can be long rent, short rent, to sell, ...-->
			<xs:element  name="TypeOfProperty" type="xs:string"/> <!--The type of property (appartment, house, garage, ...)-->
			<xs:element  name="Floors" type="xs:integer"/> <!--number of floors for house, or how heigh is an apprtement, 0 for ground floor-->
			<xs:element  name="ExteriorCommodity" type="xs:boolean"/> <!--Does the property have an exterior commodity-->
			<xs:element  name="HeatingMode" type="xs:string"/> <!--How the heating mode is handle in the property-->
			<xs:element  name="EnergyDiagnostic" type="xs:string"/> <!--Mandatory to express it with a letter here in France-->
			<xs:element  name="Address" type="xs:string"/>
			<xs:element  name="City" type="xs:string"/>
			<xs:element  name="ZIPCode" type="xs:integer"/> <!--The three last element are basically the address-->
			<xs:element  name="Size" type="xs:float"/> <!--How many square meters in the house-->
			<xs:element  name="NumberOfRooms" type="xs:integer"/>
			<xs:element  name="PriceEstimation" type="xs:integer"/> <!--The price estimation is on purpose an integer as it will be given like this-->
			<xs:element  name="Attractiveness" type="xs:float"/> <!--Here is the result of the operation : SUM(ClosestSupermarket+ClosestPublicTransport+...+ClosestHostpital)/4 (because 4 variables in the addition)-->
			<xs:element  name="ClosestSupermarket" type="xs:float"/> <!--The following closest will be use to calculate the ration of attractiveness in the XSL transformations-->
			<xs:element  name="ClosestPublicTransport" type="xs:float"/>
			<xs:element  name="ClosestSchool" type="xs:float"/> <!--Note for the group, I replaced here BANK by School because I think it is more pertinent-->
			<xs:element  name="ClosestHospital" type="xs:float"/>
		</xs:sequence>		
	</xs:complexType>					
	
	<xs:complexType name="AgentCatalog">
		<xs:sequence>
			<xs:element name="Agent" type="AgentType" minOccurs="1" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="AgentType">
		<xs:sequence>
			<xs:element  name="AgentID" type="xs:ID"/> <!--the same manner as the property table, we will gather here the informations about the agent-->
			<xs:element name="PropertyID" type="xs:IDREF"/>
			<xs:element  name="AgentName" type="xs:string"/>
			<xs:element  name="AgentFirstName" type="xs:string"/>
			<xs:element  name="AgencySIRET" type="xs:string"/>
			<xs:element  name="BirthDate" type="xs:date"/>
			<xs:element  name="AgentPercentage" type="xs:float"/> <!--The percentage isn't a key so we will not be able to reference it in the schema, however it can be used the for the xsl-->
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="LandlordCatalog">
		<xs:sequence>
			<xs:element name="Landlord" type="LandlordType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="LandlordType">
		<xs:sequence>
			<xs:element  name="LandlordID" type="xs:ID"/>
			<xs:element  name="PropertyID" type="xs:IDREF"/>
			<xs:element  name="LandlordName" type="xs:string"/>
			<xs:element  name="LandlordFirstName" type="xs:string"/>
			<xs:element  name="LandlordAddress" type="xs:string"/>
			<xs:element  name="LandlordCity" type="xs:string"/>
			<xs:element  name="LandlordZIPcode" type="xs:integer"/>
			<xs:element  name="LandlordIDCard" type="xs:string"/>
			<xs:element  name="LandlordBankDetails" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
			
	<xs:complexType name="BuyerCatalog">
		<xs:sequence>
			<xs:element name="Buyer" type="BuyerType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
			
	<xs:complexType name="BuyerType">
		<xs:sequence>
			<xs:element  name="BuyerID" type="xs:ID"/>
			<xs:element  name="BuyerName" type="xs:string"/>
			<xs:element  name="BuyerFirstName" type="xs:string"/>
			<xs:element  name="BuyerAddress" type="xs:string"/>
			<xs:element  name="BuyerCity" type="xs:string"/>
			<xs:element  name="BuyerZIPcode" type="xs:integer"/>
			<xs:element  name="BuyerIDCard" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
				
	<xs:complexType name="NotaryCatalog">
		<xs:sequence>
			<xs:element name="Notary" type="NotaryType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
				
	<xs:complexType name="NotaryType">
		<xs:sequence>
			<xs:element  name="NotaryID" type="xs:ID"/> <!--the same manner as the property table, we will gather here the informations about the agent-->
			<xs:element  name="InvoiceID" type="xs:IDREF" />
			<xs:element  name="NotaryName" type="xs:string"/>
			<xs:element  name="NotaryFirstName" type="xs:string"/>
			<xs:element  name="NotaryAddress" type="xs:string"/>
			<xs:element  name="NotaryCity" type="xs:string"/>
			<xs:element  name="NotaryZIPcode" type="xs:integer"/> <!--The address of the notary is important because it can be usefull to query the cosest one to the property-->
			<xs:element  name="NotarySIRET" type="xs:string"/>
			<xs:element  name="NotaryPercentage" type="xs:float"/>
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="TargetedCustomerCatalog">
		<xs:sequence>
			<xs:element name="TargetedCustomer" type="TargetedCustomerType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
		
	<xs:complexType name="TargetedCustomerType">
		<xs:sequence>
			<xs:element  name="CustomerID" type="xs:ID"/>
			<xs:element  name="CustomerName" type="xs:string"/>
			<xs:element  name="CustomerFirstName" type="xs:string"/>
			<xs:element  name="CustomerBirthDate" type="xs:date"/> <!--the following informations we gather are here in order to identify the profile of the customer and by definition the properties it is pertinant to advertise to him-->
			<xs:element  name="CustomerKids" type="xs:boolean"/>
			<xs:element  name="CustomerProfession" type="xs:string"/>
			<xs:element  name="CustomerLoan" type="xs:boolean"/>
			<xs:element  name="CampainMethod" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="SalesCatalog">
		<xs:sequence>
			<xs:element name="Sales" type="SalesType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	
	<xs:complexType name="SalesType">
		<xs:sequence>
			<xs:element  name="InvoiceID" type="xs:ID"/>
			<xs:element  name="InvoiceDate" type="xs:date"/>
			<xs:element  name="TypeOfContract" type="xs:string"/>
			<xs:element  name="PropertyID" type="xs:IDREF"/>
			<xs:element  name="LandlordID" type="xs:IDREF"/>
			<xs:element  name="BuyerID" type="xs:IDREF"/>
			<xs:element  name="AgentID" type="xs:IDREF"/>
			<xs:element  name="NotaryID" type="xs:IDREF"/>
			<xs:element  name="ZIPCode" type="xs:string"/>
			<xs:element  name="Price" type="xs:integer"/>
			<xs:element  name="NotaryPercentage" type="xs:float"/>
			<xs:element  name="AgentPercentage" type="xs:float"/>
			<xs:element  name="FinalPrice" type="xs:float"/>
		</xs:sequence>
	</xs:complexType>
						
	<xs:complexType name="AdvertisingCampaignCatalog">
		<xs:sequence>
			<xs:element name="AdvertisingCampaign" type="AdvertisingCampaignType" minOccurs="0" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>					
						
	<xs:complexType name="AdvertisingCampaignType">
		<xs:sequence>
			<xs:element  name="CampaignID" type="xs:ID"/>
			<xs:element  name="PropertyID" type="xs:IDREF"/>
			<xs:element  name="Attractiveness" type="xs:float"/>
			<xs:element  name="CustomerID" type="xs:IDREF"/>
			<xs:element  name="TypeOfContract" type="xs:string"/>
			<xs:element  name="TypeOfProperty" type="xs:string"/>
			<xs:element  name="CampaignMethod" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>

</xs:schema>